name: PR Workflow

on:
  pull_request:
    types:
      - opened
      - synchronize
    branches:
      - master

jobs:
  review_comment:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create review comment
      id: create_comment
      uses: actions/github-script@v4
      with:
        script: |
          const { context, github } = require("@actions/github");

          async function run() {
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;

            const newComment = await github.pulls.createReview({
              ...repo,
              pull_number: prNumber,
              commit_id: context.payload.pull_request.head.sha,
              event: "COMMENT",
              body: "Review comment content"
            });

            console.log(`Comment created: ${newComment.data.html_url}`);

            return newComment.data.id;
          }

          run().then(commentId => {
            console.log(`::set-output name=comment_id::${commentId}`);
          })
    
  email_notification:
    needs: review_comment
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    - name: Send email notification
      run: |
        echo "The conversation (ID: ${{ github.event.pull_request.id }}) has been resolved. Please check it out." > email.txt
        # Replace the following line with your own email sending logic using an SMTP library or email service provider API
        
        cat email.txt  # For demonstration purposes only
